import datetime
import os

import pytest

from hands_to_text.text import TextProcessor
from hands_to_text.text.strategy import (
    AutoCorrectionStrategy,
    ChatGPTStrategy,
    KeepRepeatedSymbolsStrategy,
    LevenshteinCorrectionStrategy,
    MajorityVoteStrategy,
    PhoneticCorrectionStrategy,
    RemoveRepetitionsStrategy,
    WordSegmentationStrategy,
)

GLOBAL_TEST_CASES = [
    ("HHHHHEEEEEELLLLLOOOOOO", "HELLO"),
    ("THHISSSSSS IIIISSSS A TTEEEESST", "THIS IS A TEST"),
    ("AAAAAAAABBBBCCCCDDDD", "ABCD"),
    (
        "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHIKKKRTOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOCOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOGDDCWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATTKUUUUUUUUUURDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDRKETEEECEEEEEEEEEEEEEEEEEEEECECOCOEEEEEOCCOCOEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEAAAAAYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYIAOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOODKUUUUUUUUUUUUUUVUVKKKKKVVVVVVVVVVVVVVKKKKKKKKKKVVVKKVVVVVVVVVVVVVVVVVUUUUUUUUVVVUUVVUVVVVVVVVVVVVVUVUUVVUUUVVVVVUUUU",
        "how are you",
    ),
    (
        "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWUVVVRKRKKKHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHXXTTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATTTTTTTTTTAATTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATTTXXXXHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHXOOOEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEMMWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWBEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEESAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMEEEETTTTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATTTTOOOHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHTTTTTTTTTTTAAAAAAAAAAAAAAAAAAAAAAAASSSSEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEKKUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR",
        "what the weather",
    ),
    (
        "LLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLDDDVRKKKKKRVVVRKKKKRRRRRRKKKKKKKRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRZZLKTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASASAAAAAAAASSSSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASTTTEERRUUUUUUBUKUUUUUUUUKUURWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWBBBEBECCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCOOOOOOCOOOCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCOESSSAAAAAAAAAAAAAAAAAAASAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASAAAAAAAAAAAAAAAAAAASSAAAASSSAAAATTTTTTTTEEESAAESSSSESSSSASSSSASSSSSAAAASSSSSSSSSSSTTSETEESSSAAAAAASSTTSTTTSTSSTSSSSSSSSTTTTTTTTTTTTTTTTTTTTTTTTSSTTTTTTSSSSSSSTTTSTSTTTSSTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT",
        "draw cat",
    ),
]


@pytest.fixture(
    params=[
        [RemoveRepetitionsStrategy, AutoCorrectionStrategy, ChatGPTStrategy],
        [PhoneticCorrectionStrategy, MajorityVoteStrategy, ChatGPTStrategy],
        [KeepRepeatedSymbolsStrategy, RemoveRepetitionsStrategy, ChatGPTStrategy],
        [ChatGPTStrategy],
    ]
)
def text_processor(request):
    strategies = [
        (
            strategy()
            if strategy != ChatGPTStrategy
            else ChatGPTStrategy(api_key=os.getenv("CHATGPT_KEY"))
        )
        for strategy in request.param
    ]
    return TextProcessor(strategies)


def accuracy_check(output: str, expected: str) -> float:
    total_chars = len(expected)
    matched_chars = sum(e == o for e, o in zip(expected, output))
    return matched_chars / total_chars if total_chars > 0 else 0.0


@pytest.mark.parametrize("input_text, expected_output", GLOBAL_TEST_CASES)
def test_strategy_combinations(
    text_processor, text_results, input_text: str, expected_output: str
):
    start = datetime.datetime.now()
    result = text_processor.process(input_text)
    delta = datetime.datetime.now() - start
    accuracy = accuracy_check(result, expected_output)
    text_results.append(
        {
            "strategies": f"`{', '.join([str(_) for _ in text_processor.strategies])}`",
            "processing_time": delta,
            "accuracy": accuracy,
            "input": input_text,
            "output": result,
            "expected": expected_output,
        }
    )
